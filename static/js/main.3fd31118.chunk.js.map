{"version":3,"sources":["components/CanvasComponent.jsx","App.js","serviceWorker.js","index.js"],"names":["CanvasComponent","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","lastX","lastY","handleTouchStart","bind","assertThisInitialized","handleTouchMove","handleTouchEnd","can","document","getElementById","ctx","getContext","addEventListener","x","y","size","_this$state","fillStyle","lineWidth","beginPath","moveTo","lineTo","stroke","arc","Math","PI","closePath","fill","setState","e","mouseIsDown","preventDefault","canX","targetTouches","pageX","offsetLeft","canY","pageY","offsetTop","drawCurve","_this$props","props","height","width","react_default","a","createElement","id","style","backgroundColor","Component","App","className","CanvasComponent_CanvasComponent","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wOAEqBA,cACnB,SAAAA,IAAc,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACZC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QACKI,MAAQ,CAAEC,MAAO,EAAGC,MAAO,GAChCT,EAAKU,iBAAmBV,EAAKU,iBAAiBC,KAAtBV,OAAAW,EAAA,EAAAX,QAAAW,EAAA,EAAAX,CAAAD,KACxBA,EAAKa,gBAAkBb,EAAKa,gBAAgBF,KAArBV,OAAAW,EAAA,EAAAX,QAAAW,EAAA,EAAAX,CAAAD,KACvBA,EAAKc,eAAiBd,EAAKc,eAAeH,KAApBV,OAAAW,EAAA,EAAAX,QAAAW,EAAA,EAAAX,CAAAD,KALVA,mFAQZG,KAAKY,IAAMC,SAASC,eAAe,OACnCd,KAAKe,IAAMf,KAAKY,IAAII,WAAW,MACvBhB,KAAKY,IAAIK,iBAAiB,aAAcjB,KAAKO,kBAAkB,GAC/DP,KAAKY,IAAIK,iBAAiB,YAAajB,KAAKU,iBAAiB,GAC7DV,KAAKY,IAAIK,iBAAiB,WAAYjB,KAAKW,gBAAgB,qCAE3DI,EAAKG,EAAGC,EAAGC,GAAM,IAAAC,EACArB,KAAKI,MAAtBC,EADiBgB,EACjBhB,MAAOC,EADUe,EACVf,MACXD,GAASC,IAAUY,IAAMb,GAASc,IAAMb,KAC1CS,EAAIO,UAAY,UAChBP,EAAIQ,UAAY,EAAIH,EACpBL,EAAIS,YACJT,EAAIU,OAAOpB,EAAOC,GAClBS,EAAIW,OAAOR,EAAGC,GACdJ,EAAIY,UAENZ,EAAIO,UAAY,UAChBP,EAAIS,YACJT,EAAIa,IAAIV,EAAGC,EAAGC,EAAM,EAAa,EAAVS,KAAKC,IAAQ,GACpCf,EAAIgB,YACJhB,EAAIiB,OACJhC,KAAKiC,SAAS,CAAE5B,MAAOa,EAAGZ,MAAOa,6CAElBe,GACflC,KAAKiC,SAAS,CAAEE,aAAa,IAC7BnC,KAAKU,gBAAgBwB,2CAEPA,GACdA,EAAEE,iBACF,IAAIC,EAAOH,EAAEI,cAAc,GAAGC,MAAQvC,KAAKY,IAAI4B,WAC3CC,EAAOP,EAAEI,cAAc,GAAGI,MAAQ1C,KAAKY,IAAI+B,UAC3C3C,KAAKI,MAAM+B,aACbnC,KAAK4C,UAAU5C,KAAKe,IAAKsB,EAAMI,EAAM,4CAIvCzC,KAAKiC,SAAS,CAAEE,aAAa,EAAO9B,MAAO,EAAGC,MAAO,qCAE9C,IAAAuC,EACmB7C,KAAK8C,MAAvBC,EADDF,EACCE,OAAQC,EADTH,EACSG,MAChB,OACEC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,UACEC,GAAG,MACHL,OAAQA,EACRC,MAAOA,EACPK,MAAO,CAAEC,gBAAiB,mBAvDSC,aCY9BC,mLARX,OACEP,EAAAC,EAAAC,cAAA,OAAKM,UAAU,OACbR,EAAAC,EAAAC,cAACO,EAAD,CAAiBX,OAAO,MAAMC,MAAM,gBAJ1BO,aCQEI,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOhB,EAAAC,EAAAC,cAACe,EAAD,MAASrD,SAASC,eAAe,SDuH3C,kBAAmBqD,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.3fd31118.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n\nexport default class CanvasComponent extends Component {\n  constructor() {\n    super();\n    this.state = { lastX: 0, lastY: 0 };\n    this.handleTouchStart = this.handleTouchStart.bind(this);\n    this.handleTouchMove = this.handleTouchMove.bind(this);\n    this.handleTouchEnd = this.handleTouchEnd.bind(this);\n  }\n  componentDidMount() {\n    this.can = document.getElementById(\"can\");\n    this.ctx = this.can.getContext(\"2d\");\n            this.can.addEventListener(\"touchstart\", this.handleTouchStart, false);\n            this.can.addEventListener(\"touchmove\", this.handleTouchMove, true);\n            this.can.addEventListener(\"touchend\", this.handleTouchEnd, false);\n  }\n  drawCurve(ctx, x, y, size) {\n    const { lastX, lastY } = this.state;\n    if (lastX && lastY && (x !== lastX || y !== lastY)) {\n      ctx.fillStyle = \"#000000\";\n      ctx.lineWidth = 2 * size;\n      ctx.beginPath();\n      ctx.moveTo(lastX, lastY);\n      ctx.lineTo(x, y);\n      ctx.stroke();\n    }\n    ctx.fillStyle = \"#000000\";\n    ctx.beginPath();\n    ctx.arc(x, y, size, 0, Math.PI * 2, true);\n    ctx.closePath();\n    ctx.fill();\n    this.setState({ lastX: x, lastY: y });\n  }\n  handleTouchStart(e) {\n    this.setState({ mouseIsDown: true });\n    this.handleTouchMove(e);\n  }\n  handleTouchMove(e) {\n    e.preventDefault();\n    let canX = e.targetTouches[0].pageX - this.can.offsetLeft;\n    let canY = e.targetTouches[0].pageY - this.can.offsetTop;\n    if (this.state.mouseIsDown) {\n      this.drawCurve(this.ctx, canX, canY, 3);\n    }\n  }\n  handleTouchEnd() {\n    this.setState({ mouseIsDown: false, lastX: 0, lastY: 0  });\n  }\n  render() {\n    const { height, width } = this.props;\n    return (\n      <div>\n        <canvas\n          id=\"can\"\n          height={height}\n          width={width}\n          style={{ backgroundColor: \"white\" }}\n        />\n      </div>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport CanvasComponent from \"./components/CanvasComponent\";\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <CanvasComponent height=\"600\" width=\"600\"/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}