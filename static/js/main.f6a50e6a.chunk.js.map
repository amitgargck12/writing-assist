{"version":3,"sources":["components/CanvasComponent.jsx","components/Controls.jsx","App.js","serviceWorker.js","index.js"],"names":["CanvasComponent","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","lastX","lastY","letter","handleTouchStart","bind","assertThisInitialized","handleTouchMove","handleTouchEnd","handleCompare","can","document","getElementById","ctx","getContext","addEventListener","offsetLeft","offsetTop","font","concat","lineWidth","baseColorArray","colorIndexConfig","base","fillStyle","join","textAlign","fillText","width","canvas","initialData","getImageData","height","console","log","x","y","size","_this$state","beginPath","moveTo","lineTo","stroke","arc","Math","PI","closePath","fill","setState","rowWidth","columnHeight","correctPixels","wrongPixels","missedPixels","evaluator","Evaluator","data","i","newImageData","setRowData","j","setCellData","isNotBlank","hasBeenDrawn","hasBeenDrawnCorrect","markCorrect","markWrong","putImageData","e","mouseIsDown","preventDefault","canX","targetTouches","pageX","canY","pageY","drawCurve","_this$props","react_default","a","createElement","onClick","id","style","backgroundColor","border","Component","oldArray","_this2","updateRowValues","array","startIndex","values","forEach","val","index","newArray","oldIndex","newValues","correct","wrong","App","className","CanvasComponent_CanvasComponent","window","innerHeight","innerWidth","Boolean","location","hostname","match","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f6a50e6a.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n\nexport default class CanvasComponent extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { lastX: 0, lastY: 0, letter: props.letter };\n    this.handleTouchStart = this.handleTouchStart.bind(this);\n    this.handleTouchMove = this.handleTouchMove.bind(this);\n    this.handleTouchEnd = this.handleTouchEnd.bind(this);\n    this.handleCompare = this.handleCompare.bind(this);\n  }\n  componentDidMount() {\n    let can = document.getElementById(\"can\");\n    this.ctx = can.getContext(\"2d\");\n    can.addEventListener(\"touchstart\", this.handleTouchStart, false);\n    can.addEventListener(\"touchmove\", this.handleTouchMove, true);\n    can.addEventListener(\"touchend\", this.handleTouchEnd, false);\n    this.offsetLeft = can.offsetLeft;\n    this.offsetTop = can.offsetTop;\n    this.ctx.font = `${this.props.lineWidth*25}px sans-serif`;\n    let baseColorArray = ['00','00','00'];\n    baseColorArray[this.props.colorIndexConfig.base]='FF';\n    this.ctx.fillStyle = \"#\"+baseColorArray.join('');\n    this.ctx.textAlign = \"center\";\n    // this.ctx.fillText(\"abcd  efgh\", 20, 90);\n    // this.ctx.fillText(\"ijkl  mnop\", 20, 190);\n    // this.ctx.fillText(\"qrst  uvwx\", 20, 290);\n    // this.ctx.fillText(\"yz\", 20, 390);\n    this.ctx.fillText(\"A\", can.width/2, 390);\n    this.canvas = can;\n    this.initialData = this.ctx.getImageData(0, 0, can.width, can.height);\n    console.log(this.canvas.width);\n  }\n  drawCurve(ctx, x, y, size) {\n    const { lastX, lastY } = this.state;\n    if (lastX && lastY && (x !== lastX || y !== lastY)) {\n      ctx.fillStyle = \"#000000\";\n      ctx.lineWidth = 2 * size;\n      ctx.beginPath();\n      ctx.moveTo(lastX, lastY);\n      ctx.lineTo(x, y);\n      ctx.stroke();\n    }\n    ctx.fillStyle = \"#000000\";\n    ctx.beginPath();\n    ctx.arc(x, y, size, 0, Math.PI * 2, true);\n    ctx.closePath();\n    ctx.fill();\n    this.setState({ lastX: x, lastY: y });\n  }\n  handleCompare() {\n    let rowWidth = this.canvas.width;\n    let columnHeight = this.canvas.height;\n\n    let correctPixels = 0;\n    let wrongPixels = 0;\n    let missedPixels = 0;\n    let evaluator = new Evaluator(\n      this.initialData.data,\n      rowWidth,\n      this.props.colorIndexConfig\n    );\n    for (var i = 0; i < columnHeight; i++) {\n      let newImageData = this.ctx.getImageData(0, i, this.canvas.width, 1);\n      evaluator.setRowData(i, newImageData.data);\n      for (var j = 0; j < rowWidth; j++) {\n        evaluator.setCellData(j);\n        if (evaluator.isNotBlank()) {\n          if (evaluator.hasBeenDrawn()) {\n            if (evaluator.hasBeenDrawnCorrect()) {\n              evaluator.markCorrect();\n              correctPixels++;\n            } else {\n              evaluator.markWrong();\n              wrongPixels++;\n            }\n            this.ctx.putImageData(newImageData, 0, i);\n          } else {\n            missedPixels++;\n          }\n        }\n      }\n    }\n    console.log(missedPixels, correctPixels, wrongPixels);\n  }\n  handleTouchStart(e) {\n    this.setState({ mouseIsDown: true });\n    this.handleTouchMove(e);\n  }\n  handleTouchMove(e) {\n    e.preventDefault();\n    let canX = e.targetTouches[0].pageX - this.offsetLeft;\n    let canY = e.targetTouches[0].pageY - this.offsetTop;\n    if (this.state.mouseIsDown) {\n      this.drawCurve(this.ctx, canX, canY, this.props.lineWidth);\n    }\n  }\n  handleTouchEnd() {\n    this.setState({ mouseIsDown: false, lastX: 0, lastY: 0 });\n  }\n  render() {\n    const { height, width } = this.props;\n    return (\n      <div>\n        <div>\n          <button onClick={this.handleCompare}>Compare</button>\n        </div>\n        <canvas\n          id=\"can\"\n          height={height}\n          width={width}\n          style={{ backgroundColor: \"white\", border: \"1px solid blue\" }}\n        />\n      </div>\n    );\n  }\n}\n\nfunction Evaluator(oldArray, rowWidth, colorIndexConfig) {\n  this.oldArray = oldArray;\n  this.rowWidth = rowWidth;\n  this.colorIndexConfig = colorIndexConfig;\n\n  this.setRowData = (i, newArray) => {\n    this.i = i;\n    this.newArray = newArray;\n  };\n\n  this.setCellData = j => {\n    this.j = j;\n  };\n\n  this.isNotBlank = function() {\n    let index = 4 * this.j;\n    return !(\n      this.newArray[index] === 0 &&\n      this.newArray[index + 1] === 0 &&\n      this.newArray[index + 2] === 0 &&\n      this.newArray[index + 3] === 0\n    );\n  };\n  this.hasBeenDrawn = function() {\n    return this.newArray[4 * this.j + colorIndexConfig.base] < 255;\n  };\n  this.hasBeenDrawnCorrect = function() {\n    let oldIndex = this.i * this.rowWidth * 4 + 4 * this.j;\n    return this.oldArray[oldIndex + colorIndexConfig.base] > 0;\n  };\n  this.markCorrect = function() {\n    let oldIndex = this.i * this.rowWidth * 4 + 4 * this.j;\n    let newValues = [0, 0, 0, this.oldArray[oldIndex + 3]];\n    newValues[colorIndexConfig.correct] = 255;\n    updateRowValues(this.newArray, 4 * this.j, newValues);\n  };\n  this.markWrong = function(newArray, j) {\n    let newValues = [0, 0, 0, 190];\n    newValues[colorIndexConfig.wrong] = 255;\n    updateRowValues(this.newArray, 4 * this.j, newValues);\n  };\n\n  function updateRowValues(array, startIndex, values) {\n    values.forEach((val, index) => (array[startIndex + index] = val));\n  }\n}\n","import React, { Component } from 'react'\n\nexport default class Controls extends Component {\n  render() {\n    return (\n      <div className=\"controls\">\n        \n      </div>\n    )\n  }\n}\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport CanvasComponent from \"./components/CanvasComponent\";\nimport Controls from \"./components/Controls\";\n\nclass App extends Component {\n  render() {\n    let colorIndexConfig = {\n      base: 2,\n      correct: 1,\n      wrong: 0\n    };\n    return (\n      <div className=\"App\">\n        <CanvasComponent\n          letter=\"A\"\n          colorIndexConfig={colorIndexConfig}\n          lineWidth={16}\n          height={window.innerHeight - 60}\n          width={window.innerWidth}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\n\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}